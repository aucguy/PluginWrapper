package com.github.aucguy.wrapperPlugin.util;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.Stream;

import org.gradle.api.Action;
import org.gradle.api.DomainObjectCollection;
import org.gradle.api.InvalidUserDataException;
import org.gradle.api.NamedDomainObjectContainer;
import org.gradle.api.NamedDomainObjectSet;
import org.gradle.api.Namer;
import org.gradle.api.Rule;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.artifacts.ConfigurationContainer;
import org.gradle.api.artifacts.Dependency;
import org.gradle.api.artifacts.UnknownConfigurationException;
import org.gradle.api.specs.Spec;

import groovy.lang.Closure;

/**
 * This is a delegating configureation container. This was generated by eclipse, so don't
 * edit this manually
 */
@SuppressWarnings("rawtypes")
public class ConfigurationContainerDelegate implements ConfigurationContainer {
	public ConfigurationContainer delegate;
	
	public ConfigurationContainerDelegate(ConfigurationContainer x) {
		delegate = x;
	}
	
	public boolean add(Configuration arg0) {
		return delegate.add(arg0);
	}

	public boolean addAll(Collection<? extends Configuration> arg0) {
		return delegate.addAll(arg0);
	}

	public Rule addRule(Rule arg0) {
		return delegate.addRule(arg0);
	}

	public Rule addRule(String arg0, Closure arg1) {
		return delegate.addRule(arg0, arg1);
	}

	public void all(Action<? super Configuration> arg0) {
		delegate.all(arg0);
	}

	public void all(Closure arg0) {
		delegate.all(arg0);
	}

	public void clear() {
		delegate.clear();
	}

	public NamedDomainObjectContainer<Configuration> configure(Closure arg0) {
		return delegate.configure(arg0);
	}

	public boolean contains(Object o) {
		return delegate.contains(o);
	}

	public boolean containsAll(Collection<?> c) {
		return delegate.containsAll(c);
	}

	public Configuration create(String arg0, Action<? super Configuration> arg1) throws InvalidUserDataException {
		return delegate.create(arg0, arg1);
	}

	public Configuration create(String arg0, Closure arg1) throws InvalidUserDataException {
		return delegate.create(arg0, arg1);
	}

	public Configuration create(String arg0) throws InvalidUserDataException {
		return delegate.create(arg0);
	}

	public Configuration detachedConfiguration(Dependency... arg0) {
		return delegate.detachedConfiguration(arg0);
	}

	public boolean equals(Object obj) {
		return delegate.equals(obj);
	}

	public Set<Configuration> findAll(Closure arg0) {
		return delegate.findAll(arg0);
	}

	public Configuration findByName(String arg0) {
		return delegate.findByName(arg0);
	}

	public void forEach(Consumer<? super Configuration> action) {
		delegate.forEach(action);
	}

	public SortedMap<String, Configuration> getAsMap() {
		return delegate.getAsMap();
	}

	public Configuration getAt(String arg0) throws UnknownConfigurationException {
		return delegate.getAt(arg0);
	}

	public Configuration getByName(String arg0, Closure arg1) throws UnknownConfigurationException {
		return delegate.getByName(arg0, arg1);
	}

	public Configuration getByName(String arg0) throws UnknownConfigurationException {
		return delegate.getByName(arg0);
	}

	public Namer<Configuration> getNamer() {
		return delegate.getNamer();
	}

	public SortedSet<String> getNames() {
		return delegate.getNames();
	}

	public List<Rule> getRules() {
		return delegate.getRules();
	}

	public int hashCode() {
		return delegate.hashCode();
	}

	public int size() {
		return delegate.size();
	}

	public boolean isEmpty() {
		return delegate.isEmpty();
	}

	public Iterator<Configuration> iterator() {
		return delegate.iterator();
	}

	public NamedDomainObjectSet<Configuration> matching(Closure arg0) {
		return delegate.matching(arg0);
	}

	public NamedDomainObjectSet<Configuration> matching(Spec<? super Configuration> arg0) {
		return delegate.matching(arg0);
	}

	public Configuration maybeCreate(String arg0) {
		return delegate.maybeCreate(arg0);
	}

	public Object[] toArray() {
		return delegate.toArray();
	}

	public <T> T[] toArray(T[] a) {
		return delegate.toArray(a);
	}

	public String toString() {
		return delegate.toString();
	}

	public boolean remove(Object o) {
		return delegate.remove(o);
	}

	public boolean removeAll(Collection<?> c) {
		return delegate.removeAll(c);
	}

	public boolean removeIf(Predicate<? super Configuration> filter) {
		return delegate.removeIf(filter);
	}

	public boolean retainAll(Collection<?> c) {
		return delegate.retainAll(c);
	}

	public Spliterator<Configuration> spliterator() {
		return delegate.spliterator();
	}

	public Stream<Configuration> stream() {
		return delegate.stream();
	}

	public Stream<Configuration> parallelStream() {
		return delegate.parallelStream();
	}

	public Action<? super Configuration> whenObjectAdded(Action<? super Configuration> arg0) {
		return delegate.whenObjectAdded(arg0);
	}

	public void whenObjectAdded(Closure arg0) {
		delegate.whenObjectAdded(arg0);
	}

	public Action<? super Configuration> whenObjectRemoved(Action<? super Configuration> arg0) {
		return delegate.whenObjectRemoved(arg0);
	}

	public void whenObjectRemoved(Closure arg0) {
		delegate.whenObjectRemoved(arg0);
	}

	public <S extends Configuration> DomainObjectCollection<S> withType(Class<S> arg0, Action<? super S> arg1) {
		return delegate.withType(arg0, arg1);
	}

	public <S extends Configuration> DomainObjectCollection<S> withType(Class<S> arg0, Closure arg1) {
		return delegate.withType(arg0, arg1);
	}

	public <S extends Configuration> NamedDomainObjectSet<S> withType(Class<S> arg0) {
		return delegate.withType(arg0);
	}
}
